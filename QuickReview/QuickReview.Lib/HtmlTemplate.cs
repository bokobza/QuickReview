// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace QuickReview.Lib
{
    using System;
    
    
    #line 1 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class HtmlTemplate : HtmlTemplateBase
    {
        public virtual string TransformText()
        {
            this.Write("<HTML>\r\n<HEAD>\r\n<STYLE type=text/css>P.myclass {\r\n\tMARGIN: 0cm 0cm 0pt\r\n}\r\nLI.myc" +
                    "lass {\r\n\tMARGIN: 0cm 0cm 0pt\r\n}\r\nDIV.myclass {\r\n\tMARGIN: 0cm 0cm 0pt\r\n}\r\nTABLE.m" +
                    "yclass {\r\n\tMARGIN: 0cm 0cm 0pt\r\n}\r\n\r\n</STYLE>\r\n<meta http-equiv=Content-Type con" +
                    "tent=\"text/html; charset=us-ascii\" /><style>\r\n        <!--\r\n/* Font Definitions " +
                    "*/\r\n@font-face\r\n\t{font-family:Calibri;\r\n\tpanose-1:2 15 5 2 2 2 4 3 2 4;}\r\n/* Sty" +
                    "le Definitions */\r\np.Normal, li.Normal, div.Normal\r\n\t{margin:0cm;\r\n\tmargin-botto" +
                    "m:.0001pt;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";}\r\np.Smal" +
                    "l, li.Small, div.Small\r\n\t{margin:0cm;\r\n\tmargin-bottom:.0001pt;\r\n\tfont-size:10.0p" +
                    "t;\r\n\tfont-family:\"Times New Roman\",\"serif\";}    \r\na:link, \r\n\t{color:blue;\r\n\ttext" +
                    "-decoration:underline;}\r\na:visited,\r\n\t{color:purple;\r\n\ttext-decoration:underline" +
                    ";}\r\n--></style>\r\n</HEAD>\r\n\r\n<body lang=\"EN-GB\" link=\"blue\" vlink=\"purple\">\r\n    " +
                    "<p class=\"myclass\">\r\n        <div>\r\n            <p class=\"Normal\">\r\n            " +
                    "    <span style=\'font-family: \"Calibri\",\"sans-serif\"\'>&nbsp;</span>\r\n           " +
                    " </p>\r\n            <table class=\"NormalTable\" border=\"0\" cellspacing=\"0\" cellpad" +
                    "ding=\"0\" style=\"border-collapse: collapse; -size: 11pt\">\r\n                <tr>\r\n" +
                    "                    <td valign=\"top\" style=\"padding: 0cm 3.6pt 0cm 0cm\">\r\n      " +
                    "                  <p class=\"Normal\">\r\n                            <b><span style" +
                    "=\'font-family: \"Calibri\",\"sans-serif\"; color: #3D5277\'>Team Project Collection: " +
                    "</span></b>\r\n                        </p>\r\n                    </td>\r\n          " +
                    "          <td valign=\"top\" style=\"padding: 0cm 3.6pt 0cm 0cm\">\r\n                " +
                    "        <p class=\"Normal\">\r\n                            <span style=\'font-family" +
                    ": \"Calibri\",\"sans-serif\"; color: #3D5277\'>");
            
            #line 59 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.shelvesetData.Changes[0].VersionControlServer.TeamProjectCollection.Name));
            
            #line default
            #line hidden
            this.Write(@"</span><span style='font-family: ""Calibri"",""sans-serif""'> </span>
                        </p>
                    </td>
                </tr>
                <tr>
                    <td valign=""top"" style=""padding: 0cm 3.6pt 0cm 0cm"">
                        <p class=""Normal"">
                            <b><span style='font-family: ""Calibri"",""sans-serif""; color: #3D5277'>Shelveset: </span></b>
                        </p>
                    </td>
                    <td valign=""top"" style=""padding: 0cm 3.6pt 0cm 0cm"">
                        <p class=""Normal"">
                            <span style='font-family: ""Calibri"",""sans-serif""; color: #3D5277'>
                            <a href=");
            
            #line 72 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.shelvesetData.GetShelvesetPath()));
            
            #line default
            #line hidden
            this.Write(" target=\"_blank\">");
            
            #line 72 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.shelvesetData.Owner + "\\" + this.shelvesetData.Name));
            
            #line default
            #line hidden
            this.Write(@"</a> 
                            </span>                           
                        </p>
                    </td>
                </tr>
                <tr>
                    <td valign=""top"" style=""padding: 0cm 3.6pt 0cm 0cm"">
                        <p class=""Normal"">
                            <b><span style='font-family: ""Calibri"",""sans-serif""; color: #3D5277'>Comment: </span></b>
                        </p>
                    </td>
                    <td valign=""top"" style=""padding: 0cm 3.6pt 0cm 0cm"">
                        <p class=""Normal"">
                            <span style='font-family: ""Calibri"",""sans-serif""; color: #3D5277'>");
            
            #line 85 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.shelvesetData.Comment));
            
            #line default
            #line hidden
            this.Write(@"</span>                            
                        </p>
                    </td>
                </tr>                
            </table>
            
            <table class=""NormalTable"" border=""0"" cellspacing=""10"" cellpadding=""0"" style=""border-collapse: collapse; -size: 11pt"">                
                <tr>
                    <td valign=""top"" style=""padding: 0cm 3.6pt 0cm 0cm"">
                        <p class=""Normal"">
                            <b>
                                <span style='font-family: ""Calibri"",""sans-serif""; color: #3D5277'>Work items: </span>
                            </b>                            
                        </p>
                    </td>
                    <td valign=""top"" style=""padding: 0cm 3.6pt 0cm 0cm"">
                        ");
            
            #line 101 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
 foreach(var item in this.shelvesetData.WorkItems)
                        { var workItem = item.WorkItem;
                        
            
            #line default
            #line hidden
            this.Write(@"                        <tr>
                            <td valign=""top"">
                                <p class=""Small"">
                                    <b>
                                        <span style='font-family: ""Calibri"",""sans-serif""; color: #3D5277'>
                                            <a href=");
            
            #line 109 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.shelvesetData.GetWorkItemPath(workItem.Id)));
            
            #line default
            #line hidden
            this.Write(" target=\"_blank\">");
            
            #line 109 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workItem.Id));
            
            #line default
            #line hidden
            this.Write(@"</a>
                                        </span>
                                    </b>
                                </p>
                            </td>

                            <td valign=""top"" style=""padding: 0cm 50.6pt 0cm 0cm"">
                                <p class=""Small""><span style='font-family: ""Calibri"",""sans-serif""; color: #3D5277'>");
            
            #line 116 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workItem.Type.Name + " [" + item.CheckinAction + "]"));
            
            #line default
            #line hidden
            this.Write(@"</span></p>
                            </td>
                            
                            <td valign=""top"" style=""padding: 0cm 1.6pt 0cm 0cm"">
                                <p class=""Small""><span style='font-family: ""Calibri"",""sans-serif""; color: #3D5277'>");
            
            #line 120 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workItem.Title));
            
            #line default
            #line hidden
            this.Write("</span></p>\r\n                            </td>                            \r\n     " +
                    "                   </tr>\r\n                        ");
            
            #line 123 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                    </td>\r\n                </tr>\r\n            </table>\r\n         " +
                    "   \r\n            <p class=\"Normal\">\r\n                <span style=\'font-family: \"" +
                    "Calibri\",\"sans-serif\"\'>&nbsp;</span></p>\r\n            <table class=\"NormalTable\"" +
                    " border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"border-collapse: collapse; -s" +
                    "ize: 11pt\">\r\n                <tr>\r\n                    <td valign=\"top\" style=\"b" +
                    "order: none; border-right: solid white 1.0pt; background: #3D5277; padding: 1.45" +
                    "pt 3.6pt 1.45pt 3.6pt\">\r\n                        <p class=\"Normal\" align=\"center" +
                    "\" style=\"text-align: center\">\r\n                            <b><span style=\'font-" +
                    "family: \"Calibri\",\"sans-serif\"; color: white\'>Folder</span></b></p>\r\n           " +
                    "         </td>\r\n                    <td valign=\"top\" style=\"border: none; border" +
                    "-right: solid white 1.0pt; background: #3D5277; padding: 1.45pt 3.6pt 1.45pt 3.6" +
                    "pt\">\r\n                        <p class=\"Normal\" align=\"center\" style=\"text-align" +
                    ": center\">\r\n                            <b><span style=\'font-family: \"Calibri\",\"" +
                    "sans-serif\"; color: white\'>File name</span></b></p>\r\n                    </td>\r\n" +
                    "                    <td valign=\"top\" style=\"border: none; border-right: solid wh" +
                    "ite 1.0pt; background: #3D5277; padding: 1.45pt 3.6pt 1.45pt 3.6pt\">\r\n          " +
                    "              <p class=\"Normal\" align=\"center\" style=\"text-align: center\">\r\n    " +
                    "                        <b><span style=\'font-family: \"Calibri\",\"sans-serif\"; col" +
                    "or: white\'>Status</span></b></p>\r\n                    </td>\r\n                   " +
                    " <td valign=\"top\" style=\"border: none; border-right: solid white 1.0pt; backgrou" +
                    "nd: #3D5277; padding: 1.45pt 3.6pt 1.45pt 3.6pt\">\r\n                        <p cl" +
                    "ass=\"Normal\" align=\"center\" style=\"text-align: center\">\r\n                       " +
                    "     <b><span style=\'font-family: \"Calibri\",\"sans-serif\"; color: white\'>Link</sp" +
                    "an></b></p>\r\n                    </td>\r\n                </tr>\r\n                ");
            
            #line 149 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
 foreach(var change in this.shelvesetData.Changes)
                { var changeConfig = this.shelvesetData.GetChangeConfig(change);
                
            
            #line default
            #line hidden
            this.Write(@" 
                <tr>
                    <td valign=""top"" style=""border: none; border-right: solid white 1.0pt; background: #DEE8F2; padding: 1.45pt 3.6pt 1.45pt 3.6pt"">
                        <p class=""Small"">
                            <span style='font-family: ""Calibri"",""sans-serif""'>");
            
            #line 155 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(change.LocalOrServerFolder));
            
            #line default
            #line hidden
            this.Write(@"</span></p>
                    </td>
                    <td valign=""top"" style=""border: none; border-right: solid white 1.0pt; background: #DEE8F2; padding: 1.45pt 3.6pt 1.45pt 3.6pt"">
                        <p class=""Normal"">
                            <span style='font-family: ""Calibri"",""sans-serif""'>");
            
            #line 159 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(change.FileName));
            
            #line default
            #line hidden
            this.Write(@"</span></p>
                    </td>
                    <td valign=""top"" style=""border: none; border-right: solid white 1.0pt; background: #DEE8F2; padding: 1.45pt 3.6pt 1.45pt 3.6pt"">
                        <p class=""Normal"">
                            <span style='font-family: ""Calibri"",""sans-serif""; color: ");
            
            #line 163 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(changeConfig.Colour));
            
            #line default
            #line hidden
            this.Write("\'>");
            
            #line 163 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(changeConfig.Text));
            
            #line default
            #line hidden
            this.Write(@"</span></p>
                    </td>
                    <td valign=""top"" style=""border: none; border-right: solid white 1.0pt; background: #DEE8F2; padding: 1.45pt 3.6pt 1.45pt 3.6pt"">
                        <p class=""Normal"">
                            <span style='font-family: ""Calibri"",""sans-serif""'><a href=");
            
            #line 167 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(changeConfig.Link));
            
            #line default
            #line hidden
            this.Write(" target=\"_blank\">\r\n                               ");
            
            #line 168 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(changeConfig.LinkText));
            
            #line default
            #line hidden
            this.Write("</a> </span>\r\n                        </p>\r\n                    </td>            " +
                    "              \r\n                </tr>                            \r\n             " +
                    "   ");
            
            #line 172 "C:\Users\jeremy\Documents\Visual Studio 2010\Projects\CodeReviewHelpers\QuickReview\HtmlTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            </table>\r\n            <p class=\"Normal\">&nbsp;</p>\r\n        </div>\r" +
                    "\n    </p>    \r\n</body>\r\n</HTML>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class HtmlTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
